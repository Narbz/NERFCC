<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ams">

<!-- for every table(and consequently every class we made for the tables) we need to create a resultmap.  A resultmap binds the elements from our classes and the tables so that we can use the setters and getters from those classes. -->
<!-- make sure the name you set for 'class' is the exact name you made for the java class -->
<resultMap id="item" type="Item">
	<result property="upc" column="upc"/>
	<result property="itemTitle" column="itemTitle"/>
	<result property="type" column="type"/>
	<result property="category" column="category"/>
	<result property="company" column="company"/>
	<result property="year" column="year"/>
	<result property="price" column="price"/>
	<result property="stock" column="stock"/>
</resultMap>

<resultMap id="leadSinger" type="LeadSinger">
	<result property="upc" column="upc"/>
    <result property="singerName" column="singerName"/>
</resultMap>

<resultMap id="itemSearch" type="SearchItem">
	<result property="upc" column="upc"/>
	<result property="itemTitle" column="itemTitle"/>
	<result property="singerName" column="singerName"/>
	<result property="type" column="type"/>
	<result property="category" column="category"/>
	<result property="company" column="company"/>
	<result property="year" column="year"/>
	<result property="price" column="price"/>
	<result property="stock" column="stock"/>
</resultMap>

<resultMap id="topNItems" type="SearchTopNitems">
	<result property="upc" column="upc"/>
	<result property="Title" column="Title"/>
	<result property="category" column="category"/>
	<result property="stock" column="stock"/>
	<result property="Sold" column="Sold"/>
</resultMap>

<resultMap id="dailySalesReport" type="DailySalesReport">
	<result property="upc" column="upc"/>
	<result property="category" column="category"/>
	<result property="price" column="price"/>
	<result property="Sold" column="Sold"/>
	<result property="Total" column="Total"/>
</resultMap>

<resultMap id="order" type="Order">
	<result property="receiptId" column="receiptId"/>
	<result property="date" column="date"/>
	<result property="cid" column="cid"/>
	<result property="cardNum" column="cardNUm"/>
	<result property="expiryDate" column="expiryDate"/>
	<result property="expectedDate" column="expectedDate"/>
	<result property="deliveredDate" column="deliveredDate"/>
</resultMap>

<resultMap id="hasSong" type="HasSong">
	<result property="upc" column="upc"/>
    <result property="songTitle" column="songTitle"/>
</resultMap>

<resultMap id="customer" type="Customer">
	<result property="cid" column="cid"/>
    <result property="customerName" column="customerName"/>
	<result property="password" column="password"/>
	<result property="address" column="address"/>
	<result property="phone" column="phone"/>
</resultMap>

<resultMap id="purchaseItem" type="PurchaseItem">
	<result property="receiptId" column="receiptId"/>
	<result property="upc" column="upc"/>
    <result property="quantity" column="quantity"/>
</resultMap>

<resultMap id="return" type="Return">
	<result property="retid" column="retid"/>
	<result property="date" column="date"/>
	<result property="receiptId" column="receiptId"/>
</resultMap>

<resultMap id="returnItem" type="ReturnItem">
	<result property="retid" column="retid"/>
	<result property="upc" column="upc"/>
	<result property="quantity" column="quantity"/>
</resultMap>

<resultMap id="record" type="Record">
	<result property="id" column="id"/>
</resultMap>



<!-- add your result maps here -->

<!-- end Resultmaps section -->


<!-- Start of the sql statements -->

<!-- for every insert, select and update, ensure to create a unique id for the statement(follow format below) -->

<!-- Insert Statements-->

<insert id="insertItem">
	insert into Item
		values (#{upc}, #{itemTitle}, #{type}, #{category}, #{company}, #{year}, #{price}, #{stock})
</insert>

<insert id="insertOrder">
	insert into Orders
		values (#{receiptId}, #{date}, #{cid}, #{cardNum}, #{expiryDate}, #{expectedDate}, #{deliveredDate})
</insert>

<insert id="insertCustomer">
	insert into Customer
		values (#{cid}, SHA(#{password}), #{customerName}, #{address}, #{phone});
</insert>

<insert id="insertHasSong">
	insert into HasSong
		values (#{upc}, #{songTitle})
</insert>

<insert id="insertLeadSinger">
	insert into LeadSinger
		values (#{upc}, #{singerName})
</insert>

<insert id="insertPurchaseItem">
	insert into PurchaseItem
		values (#{receiptId}, #{upc}, #{quantity})
</insert>

<insert id="insertReturn">
	insert into Returns
		values (#{retid}, #{date}, #{receiptId})
</insert>

<insert id="insertReturnItem">
	insert into ReturnItem
		values (#{retid}, #{upc}, #{quantity})
</insert>

<!-- Select Statements. -->
<select id="selectCustomerExists" resultType="int">
<!-- if this returns 0, then username does not exist in the system.  If it returns 1, then the username is in the system --> 
	SELECT count(*)
	FROM Customer
	WHERE cid = #{cid}
</select>

<select id="selectCustomer" resultMap="customer">
	SELECT *
	FROM Customer
	wHERE cid = #{cid}
</select>

<select id="selectCustomerLogin" resultType="int">
	SELECT count(*)
	FROM Customer
	WHERE Customer.cid = #{cid} AND Customer.password = SHA(#{password})
</select>

<select id="selectReceiptToVerifyDate" resultType="int">	
	<!-- if the date false in the 15 day range, a 1 will be returned, 0 otherwise. &lt;= represents less than(or equal to) as xml complains if you put the literal Less then bracket -->
	SELECT count(*) 
	FROM Orders 
	WHERE Orders.receiptId = #{receiptId} AND DATEDIFF(DATE(CURRENT_TIMESTAMP), Orders.date) &lt;= 15
</select>

<select id="selectItemStock" resultType="int">
	SELECT I.stock
	FROM Item I
	WHERE I.upc = #{upc}
</select>

<select id="selectDailySalesReport" resultMap="dailySalesReport">
	SELECT i.upc, i.category, i.price,  sum(quantity) as Sold, round((i.price*sum(quantity)), 2) as Total 
	FROM Orders o, PurchaseItem p, item i 
	WHERE o.receiptId = p.receiptId AND i.upc = p.upc AND o.date = #{date}
	GROUP BY upc
</select>

<select id="selectTopNItems" resultMap="topNItems">
	SELECT i.upc, i.itemTitle as Title, i.category, i.stock, sum(quantity) as Sold 
	FROM Orders o, PurchaseItem p, item i 
	WHERE o.receiptId = p.receiptId AND i.upc = p.upc AND o.date = #{date} 
	GROUP BY upc 
	ORDER BY Sold DESC 
	Limit #{n};
</select>

<!-- this one will not work yet, narbeh working on it -->
<select id="selectItemSearch" resultMap="itemSearch">
	SELECT I.upc, I.itemTitle, S.singerName, I.stock, I.price, I.type, I.category, I.company, I.year
	FROM Item I INNER JOIN LeadSinger S
	ON I.upc = S.upc
	WHERE category = #{category} OR itemTitle like #{itemTitle} OR singerName = #{singerName}
</select>

<select id="selectItem" resultMap="item">
	SELECT *
	FROM Item 
	WHERE upc = #{upc}
</select>

<!-- Not certain we need these, but we will have them anyways -->
<select id="selectItemByCategory" resultMap="item">
	SELECT *
	FROM Item
	WHERE category = #{category}
</select>

<select id="selectItemByTitle" resultMap="item">
	SELECT *
	FROM Item
	WHERE itemTitle like #{itemTitle}
</select>

<select id="selectRetId" resultType="int">
	select retid
	from Returns
	where receiptId = #{receiptId}
</select>

<select id="selectPurchases" resultMap="purchaseItem">
	SELECT *
	FROM PurchaseItem
	WHERE receiptId = #{receiptId}
</select>

<select id="selectReturnItems" resultMap="returnItem">
	SELECT *
	FROM ReturnItem
	WHERE retid = #{reiId}
</select>

<select id="selectLatestPurchaseReceiptId" resultType="int">
	SELECT max(receiptId)
	FROM PurchaseItem
</select>

<select id="selectLatestReturnRetId" resultType="int">
	SELECT max(retid)
	FROM Returns
</select>

<select id="selectLatestReturnReceiptId" resultType="int">
	SELECT max(receiptId)
	FROM Returns
</select>

<select id="selectOrderExists" resultType="int">
	SELECT count(*)
	FROM Orders
	WHERE receiptId = #{receiptId}
</select>

<select id="selectOrder" resultMap="order">
	SELECT *
	FROM Orders
	WHERE receiptId = #{receiptId}
</select>

<select id="selectRetunUpcExists" resultType = "int">
	SELECT count(*)
	FROM ReturnItem
	WHERE upc = #{upc}
</select>

<!--Update Statements-->
<update id="updateItemStock">
	UPDATE Item
	SET stock = #{stock}
	WHERE upc = #{upc}
</update>

<update id="updateItemStockAndPrice">
	UPDATE Item
	SET stock = #{stock}, price = #{price}
	WHERE upc = #{upc}
</update>

<update id="updateOrderDate">
	UPDATE Orders
	SET deliveredDate = #{deliveredDate}
	WHERE receiptId = #{receiptId}
</update>

</mapper>
